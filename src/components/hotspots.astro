---
export interface Props {
    headline: string;
    id?: string;
    imgUrl: string;
    hotspotData: Array;
}

const { headline, id, imgUrl, hotspotData } = Astro.props;
---

<div class="image-hotspots mx-auto max-w-7xl pt-10 lg:pt-20" id={id}>
    <div class="text-center text-raisin">
        <h3 class="lg:underline-5xl underline-4xl text-4xl font-bold leading-snug lg:text-5xl">{headline}</h3>
    </div>
    <div class="relative mx-auto max-w-4xl">
        <img class="mx-auto h-auto w-full" src={imgUrl} alt="The Oater Barista" />

        <div class="hotspots inset-0">
            {
                hotspotData.map((spot, index) => (
                    <div class={spot.pos + " hotspot absolute"}>
                        <div class="flex h-6 w-6 cursor-pointer select-none items-center justify-center rounded-full bg-oat-light text-sm text-raisin drop-shadow-sm transition-all hover:scale-105 hover:bg-oat hover:text-white lg:h-8 lg:w-8 lg:text-base">
                            {index + 1}
                        </div>
                        <div
                            class={
                                spot.orientation +
                                "-full popover md:visble invisible absolute top-0 z-10 mx-3 hidden w-[35vw] max-w-sm rounded-md bg-zinc-100 p-6 shadow lg:w-[50vw]"
                            }
                        >
                            <button class="absolute top-0 right-0 mt-2 mr-2 hover:text-sonic" id="closePopover">
                                <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    fill="none"
                                    viewBox="0 0 24 24"
                                    stroke-width="1.5"
                                    stroke="currentColor"
                                    class="h-6 w-6"
                                >
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                                </svg>
                            </button>
                            <h3 class="mb-4 font-semibold text-raisin">
                                {index + 1}. {spot.title}
                            </h3>
                            <p class="mb-2 text-sm text-raisin md:text-base">{spot.text}</p>
                        </div>
                    </div>
                ))
            }
        </div>
    </div>
    <div class="mx-10 mb-10 block rounded-md bg-zinc-100 md:hidden">
        {
            hotspotData.map((spot, index) => (
                <div class="mobile-popover  hidden p-6" data-index={index}>
                    <div class="mb-2 font-semibold text-raisin">
                        {index + 1}. {spot.title}
                    </div>
                    <p class="mb-2 text-sm text-raisin md:text-base">{spot.text}</p>
                </div>
            ))
        }
    </div>
</div>
<script>
    let selectedHotspotIndex = null;
    const mobilePopovers = document.querySelectorAll(".mobile-popover");

    // Define a function that will be called whenever the matchMedia state changes
    function handleTabletChange(e) {
        // If we're above md breakpoint
        if (e.matches) {
            document.querySelectorAll(".popover").forEach((popover) => {
                popover.classList.remove("invisible");
            });
        } else {
            // Below the md breakpoint
            document.querySelectorAll(".popover").forEach((popover) => {
                popover.classList.add("invisible");
            });
        }
    }

    // Create a media query list using the matchMedia method
    let mql = window.matchMedia("(min-width: 768px)");

    // Register the handler to the media query list so it will
    // call handleTabletChange whenever the media query state changes
    mql.addEventListener("change", handleTabletChange);

    // Call the handler right away so it sets the initial state
    handleTabletChange(mql);

    document.querySelectorAll(".image-hotspots").forEach((imageHotspot) => {
        const hotspots = imageHotspot.querySelectorAll(".hotspot");

        hotspots.forEach((hotspot, index) => {
            const popover = hotspot.querySelector(".popover");

            hotspot.addEventListener("click", (event) => {
                event.stopPropagation();
                selectedHotspotIndex = index;

                // Hide other popovers
                hotspots.forEach((otherHotspot) => {
                    if (otherHotspot !== hotspot) {
                        const otherPopover = otherHotspot.querySelector(".popover");
                        otherPopover.classList.add("hidden");
                    }
                });

                // Show or hide the clicked popover
                popover.classList.toggle("hidden");

                // Show the corresponding mobile popover
                mobilePopovers.forEach((popover, popoverIndex) => {
                    if (popoverIndex === selectedHotspotIndex) {
                        popover.classList.remove("hidden");
                    } else {
                        popover.classList.add("hidden");
                    }
                });

                // Close button event listener
                const closeButton = popover.querySelector("#closePopover");
                closeButton.addEventListener("click", (event) => {
                    event.stopPropagation();
                    popover.classList.add("hidden");
                    mobilePopovers[selectedHotspotIndex].classList.add("hidden");
                });
            });
        });

        document.addEventListener("click", () => {
            hotspots.forEach((hotspot) => {
                const popover = hotspot.querySelector(".popover");
                popover.classList.add("hidden");
            });
            mobilePopovers.forEach((popover) => {
                popover.classList.add("hidden");
            });
        });
    });

    // When you're done with it, you can remove the event listener
    // mql.removeEventListener("change", handleTabletChange);
</script>
