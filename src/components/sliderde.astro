---
export interface Props {
    id?: string;
    sliderData: Array;
}
const { id, sliderData } = Astro.props;
---

<!--rewrite needed, this is garbage-->
<style>
    .no-scrollbar::-webkit-scrollbar {
        display: none; /* Safari and Chrome */
    }
</style>
<div class="relative hidden lg:block" id={id}>
    <div class="navigation-container mb-6 flex justify-center space-x-1 lg:space-x-3">
        <button class="nav-item font-zen uppercase text-raisin decoration-2 underline-offset-4 hover:underline">Für Unternehmen</button><span
            >|</span
        >
        <button class="nav-item font-zen uppercase text-raisin decoration-2 underline-offset-4 hover:underline">Für Cafés</button><span>|</span>
        <button class="nav-item font-zen uppercase text-raisin decoration-2 underline-offset-4 hover:underline">Hotels</button><span>|</span
        >
        <button class="nav-item font-zen uppercase text-raisin decoration-2 underline-offset-4 hover:underline">Co-working Spaces/Büros</button
        ><span>|</span>
        <button class="nav-item font-zen uppercase text-raisin decoration-2 underline-offset-4 hover:underline">Für Unverpacktläden</button>
    </div>
    <div
        class="container-snap no-scrollbar relative flex w-full snap-x snap-mandatory gap-6 overflow-x-auto"
        style="scrollbar-width: none;-ms-overflow-style: none;"
    >
        <div class="w-5xl shrink-0">
            <div class="h-full w-96 rounded bg-cover" style="background-image: url(../zerowastestore.webp)"></div>
        </div>
        {
            sliderData.map((slide) => (
                <div class="relative w-full max-w-5xl shrink-0 snap-center ">
                    <img src={slide.imgUrl} class="scroll-image lg:rounded" />
                    <div class="group">
                        <div class="absolute bottom-0 h-1/3 w-full bg-gradient-to-t from-raisin transition-all duration-300 ease-in-out group-hover:h-full group-hover:bg-raisin/70 lg:rounded" />

                        <div class="absolute top-[65%] m-5 overflow-hidden transition-all duration-300 ease-in-out group-hover:top-0 md:top-3/4 md:m-14">
                            <div class="relative text-2xl font-bold text-white md:pb-10">
                                {slide.title}
                                <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    fill="none"
                                    viewBox="0 0 24 24"
                                    stroke-width="4"
                                    stroke="currentColor"
                                    class="mb-0.5 inline h-5 w-5"
                                >
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5" />
                                </svg>
                            </div>
                            <div class="hidden text-sm text-white group-hover:block md:text-base">{slide.text}</div>
                        </div>
                    </div>
                </div>
            ))
        }
        <div class="w-5xl hidden shrink-0 lg:block">
            <div class="h-full w-96 rounded bg-cover" style="background-image: url(../office_kitchen.webp)"></div>
        </div>
    </div>
    <div
        class="indicators-container invisible absolute bottom-7 left-1/2 flex -translate-x-1/2 transform justify-center space-x-2 lg:visible"
    >
    </div>
</div>

<div
    class="container-snap no-scrollbar relative flex w-full snap-x snap-mandatory flex-row overflow-x-auto pb-8 lg:hidden"
    style="scrollbar-width: none;-ms-overflow-style: none;"
>
    <div class="relative w-1 shrink-0 snap-center"></div>
    {
        sliderData.map((slide) => (
            <div class="relative w-full max-w-2xl shrink-0 snap-center">
                <div class="relative mx-5 rounded-xl shadow-xl">
                    <div class="absolute top-0 h-28 w-full rounded-t-xl bg-gradient-to-b from-raisin " />
                    <h3 class="absolute p-5 text-lg font-bold text-white">{slide.title}</h3>
                    <img class="rounded-t-xl" src={slide.imgUrl} />

                    <div class="m-7 pb-5 leading-7 text-raisin">{slide.text}</div>
                </div>
            </div>
        ))
    }
    <div class="relative w-1 shrink-0 snap-center"></div>
</div>

<script>
    const images = document.querySelectorAll(".scroll-image");

    // Add click event listeners to each image
    images.forEach((image) => {
        image.addEventListener("click", () => {
            // Scroll to the clicked image
            image.scrollIntoView({ behavior: "smooth", block: "nearest" });
        });
    });
</script>
<script>
    // Get the image container, indicators container, and navigation container elements
    const imageContainer = document.querySelector(".snap-x");
    const indicatorsContainer = document.querySelector(".indicators-container");
    const navigationContainer = document.querySelector(".navigation-container");

    // Get all the images with the 'scroll-image' class
    const images = document.querySelectorAll(".scroll-image");

    // Create an indicator for each image and add it to the indicators container
    images.forEach((_, index) => {
        const indicator = document.createElement("div") as HTMLElement;
        indicator.classList.add(
            "indicator",
            "w-3",
            "h-3",
            "rounded-full",
            "bg-gray-300",
            "cursor-pointer",
            "transition-colors",
            "duration-300"
        );
        indicator.dataset.index = index.toString();
        indicatorsContainer.appendChild(indicator);
    });

    // Add click event listeners to each indicator
    const indicators = document.querySelectorAll(".indicator");
    indicators.forEach((indicator) => {
        indicator.addEventListener("click", () => {
            const index = Number(indicator.dataset.index);
            images[index].scrollIntoView({ behavior: "smooth", block: "nearest" });
        });
    });

    // Add click event listeners to each navigation item
    const navItems = document.querySelectorAll(".nav-item");
    navItems.forEach((navItem, index) => {
        navItem.addEventListener("click", () => {
            // Remove underline from all navigation items
            navItems.forEach((item) => {
                item.classList.remove("underline");
            });

            // Add underline to the current navigation item
            navItem.classList.add("underline");

            // Scroll to the corresponding image
            images[index].scrollIntoView({ behavior: "smooth", block: "nearest" });
        });
    });

    // Update the active indicator when the scroll position changes
    imageContainer.addEventListener("scroll", () => {
        const activeIndex = Math.round(imageContainer.scrollLeft / images[0].clientWidth);
        indicators.forEach((indicator, index) => {
            indicator.classList.toggle("bg-gray-800", index === activeIndex);
        });
    });
</script>
