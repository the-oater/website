---
export interface Props {
    headline: string;
    id?: string;
    hotspotData: Array;
}

const { headline, id, hotspotData } = Astro.props;
---

<div class="image-hotspots mx-auto max-w-7xl pt-20" id={id}>
    <div class="text-center text-raisin">
        <h3 class="lg:underline-5xl underline-4xl text-4xl font-bold leading-snug lg:text-5xl">{headline}</h3>
    </div>
    <div class="relative mx-auto max-w-4xl">
        <img class="mx-auto h-auto w-full" src="/hotspots.jpg" alt="The Oater Barista" />

        <div class="hotspots inset-0">
            {
                hotspotData.map((spot, index) => (
                    <div class={spot.pos + " hotspot absolute"}>
                        <div class="flex h-6 w-6 cursor-pointer select-none items-center justify-center rounded-full bg-oat-light text-sm text-raisin outline outline-1 outline-oat drop-shadow-sm transition-all hover:scale-105 hover:bg-oat hover:text-white hover:outline-oat-lighter lg:h-8 lg:w-8 lg:text-base">
                            {index + 1}
                        </div>
                        <div
                            class={
                                spot.orientation +
                                "-full popover absolute top-0 z-10 mx-3 hidden w-[50vw] max-w-sm rounded-md bg-zinc-100 p-6 shadow"
                            }
                        >
                            <button class="absolute top-0 right-0 mt-2 mr-2 hover:text-sonic" id="closePopover">
                                <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    fill="none"
                                    viewBox="0 0 24 24"
                                    stroke-width="1.5"
                                    stroke="currentColor"
                                    class="h-6 w-6"
                                >
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                                </svg>
                            </button>
                            <h3 class="mb-4 font-semibold text-raisin">
                                {index + 1}. {spot.title}
                            </h3>
                            <p class="mb-2 text-sm text-raisin md:text-base">{spot.text}</p>
                        </div>
                    </div>
                ))
            }
        </div>
    </div>
</div>
<script>
    document.querySelectorAll(".image-hotspots").forEach((imageHotspot) => {
        const hotspots = imageHotspot.querySelectorAll(".hotspot");

        hotspots.forEach((hotspot) => {
            const popover = hotspot.querySelector(".popover");

            hotspot.addEventListener("click", (event) => {
                event.stopPropagation();
                hotspots.forEach((otherHotspot) => {
                    if (otherHotspot !== hotspot) {
                        const otherPopover = otherHotspot.querySelector(".popover");
                        otherPopover.classList.add("hidden");
                    }
                });
                popover.classList.toggle("hidden");

                // Add this event listener for the close button
                const closeButton = popover.querySelector("#closePopover");
                closeButton.addEventListener("click", (event) => {
                    event.stopPropagation();
                    popover.classList.add("hidden");
                });
            });
        });

        document.addEventListener("click", () => {
            hotspots.forEach((hotspot) => {
                const popover = hotspot.querySelector(".popover");
                popover.classList.add("hidden");
            });
        });
    });
</script>
